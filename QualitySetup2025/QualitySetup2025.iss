; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "QualitySetup2025"
#define MyAppVersion "25.05.6.2"
#define MyAppPublisher "Quality Automacao Ltda"
#define MyAppURL "https://www.webposto.com.br/"

[Setup]
; Informações básicas
AppId={{32F8EC48-01AC-445F-AE3A-6539C06F4D66}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppComments="© Janiel Borges - Imperdata Tecnologia"

; Configurações de versão
VersionInfoVersion={#MyAppVersion}
VersionInfoTextVersion={#MyAppVersion}

; Configurações de instalação
DefaultDirName=C:\Quality
UsePreviousAppDir=no
DisableDirPage=yes
DisableStartupPrompt=yes
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
PrivilegesRequired=admin

; Configurações de compilação
OutputBaseFilename=QualitySetup2025
Compression=lzma2/ultra64
SolidCompression=yes
LZMAUseSeparateProcess=yes
WizardStyle=modern

[VersionInfo]
FileVersion={#MyAppVersion}      
ProductVersion={#MyAppVersion}   
CompanyName={#MyAppPublisher}    
FileDescription={#MyAppName} Setup
LegalCopyright=Copyright © 2025 {#MyAppPublisher}

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

[Tasks]
Name: "desktopicon"; Description: "Criar um ícone na área de trabalho"; GroupDescription: "Ícones adicionais:"
Name: "postgres_completo"; Description: "Instalaçao completa, PostgreSQL 12 e PDV"; GroupDescription: "Opçoes de Instalaçao:"; Flags: exclusive
Name: "postgres_somente"; Description: "Instalar somente o PostgreSQL 12 sem PDV"; GroupDescription: "Opçoes de Instalaçao:"; Flags: exclusive
Name: "pdvaux"; Description: "Instalar PDV Auxiliar Sem PostgreSQL"; GroupDescription: "Opçoes de Instalaçao:"; Flags: exclusive

[Files]
; Script de atualização
Source: "UpdateChecker.ps1"; DestDir: "{commonappdata}\QualityTemp"; Flags: dontcopy deleteafterinstall

; Script de limpeza do PostgreSQL
Source: "clean_postgres.ps1"; DestDir: "{tmp}"; Flags: dontcopy deleteafterinstall

; Arquivos principais
Source: "Quality\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: (IsTaskSelected('postgres_completo') or IsTaskSelected('pdvaux'))
Source: "Quality\instala\*"; DestDir: "{app}\instala"; Flags: ignoreversion recursesubdirs createallsubdirs; Check: IsTaskSelected('postgres_somente')

; Script instalador do postgres
Source: "installPostgreSQL.ps1"; DestDir: "{commonappdata}\QualityTemp"; Flags: dontcopy deleteafterinstall; Check: (IsTaskSelected('postgres_completo') or IsTaskSelected('postgres_somente'))

[Run]
Filename: "C:\Quality\Script\Capicom\instaladlls.bat"; Flags: runascurrentuser runhidden waituntilterminated; Check: (IsTaskSelected('postgres_completo') or IsTaskSelected('pdvaux'))
Filename: "cmd.exe"; Parameters: "/C rmdir /s /q ""C:\Quality\Script\Capicom"""; Flags: runhidden waituntilterminated; Check: (IsTaskSelected('postgres_completo') or IsTaskSelected('pdvaux')) 

[UninstallDelete]
Type: filesandordirs; Name: "C:\Quality\*"
Type: dirifempty; Name: "C:\Quality"

[Code]
// ==============================================
// CONSTANTES E VARIÁVEIS GLOBAIS
// ==============================================
const
  WM_CLOSE = $0010;

var
  // Variáveis de interface
  PaginaConfig: TWizardPage;
  PortaEdit, CNPJEdit, IDQEdit, NomeBancoEdit, SenhaEdit: TEdit;
  CheckBoxPostgres1, CheckBoxPostgres2, CheckBoxWebpostopay, CheckBoxSemParar: TCheckBox;
  
  // Variáveis de processo
  ResultCode: Integer;
  ProgressForm: TForm;
  TaskPageID: Integer;

// ==============================================
// FUNÇÕES AUXILIARES
// ==============================================
function IsPortInUse(Port: String): Boolean;
var
  ResultCode: Integer;
begin
  // Método usando netstat (funciona em qualquer Windows)
  if Exec(ExpandConstant('{cmd}'), 
          '/C netstat -ano | find /C ":' + Port + '" | find /V "0"', 
          '', 
          SW_HIDE, 
          ewWaitUntilTerminated, 
          ResultCode) then
  begin
    Result := (ResultCode = 0);
  end
  else
  begin
    Result := False;
  end;
end;


// Função para executar o script BAT
function IsPostgreSQL12Installed: Boolean;
var
  Version: String;
  UninstallKey: String;
  ServiceExists: Boolean;
begin
  Result := False;
  
  // 1. Verifica no registro (32 e 64 bits)
  UninstallKey := 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\PostgreSQL 12';
  if RegQueryStringValue(HKLM32, UninstallKey, 'DisplayVersion', Version) or
     RegQueryStringValue(HKLM64, UninstallKey, 'DisplayVersion', Version) then
  begin
    Result := True;
    Log('PostgreSQL 12 encontrado no registro. Versão: ' + Version);
    Exit;
  end;

  // 2. Verifica serviço
  ServiceExists := False;
  if Exec(ExpandConstant('{sys}\sc.exe'), 'query postgresql-x64-12', '', SW_HIDE, 
      ewWaitUntilTerminated, ResultCode) then
  begin
    if ResultCode = 0 then ServiceExists := True;
  end;
  
  if ServiceExists then
  begin
    Result := True;
    Log('Serviço PostgreSQL 12 encontrado');
    Exit;
  end;

  // 3. Verificação física
  if DirExists('C:\Program Files\PostgreSQL\12') or 
     DirExists('C:\Program Files (x86)\PostgreSQL\12') then
  begin
    Result := True;
    Log('Pasta PostgreSQL 12 encontrada');
  end;
end;

function ExecutarRemocaoPostgreSQL: Boolean;
var
  PowerShellPath: String;
  Comando: String;
  ResultCode: Integer;
  LogFile: String;
begin
  Result := False;
  LogFile := ExpandConstant('{tmp}\postgres_clean.log');
  
  // Extrai o script para a pasta temporária
  ExtractTemporaryFile('clean_postgres.ps1');
  
  // Caminho do PowerShell
  PowerShellPath := ExpandConstant('{sys}\WindowsPowerShell\v1.0\powershell.exe');
  
  // Comando para executar oculto com logging
  Comando := '-NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File "' + 
             ExpandConstant('{tmp}\clean_postgres.ps1') + '"';
  
  // Executa completamente oculto
  if Exec(PowerShellPath, Comando, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  begin
    Result := (ResultCode = 0);
    
    // Se houver erro, mostra o log ao usuário
    if not Result then
    begin
      if FileExists(GetEnv('TEMP') + '\PostgreSQL_Removal.log') then
        ShellExec('open', GetEnv('TEMP') + '\PostgreSQL_Removal.log', '', '', SW_SHOW, ewNoWait, ResultCode);
    end;
  end;
end;

function ExtractUpdateChecker(): Boolean;
var
  tempFile, destFile, securePath: string;
begin
  securePath := ExpandConstant('{commonappdata}\QualityTemp');
  
  try
    // Cria diretório com atributos ocultos
    if not DirExists(securePath) then
    begin
      CreateDir(securePath);
      Exec(ExpandConstant('{cmd}'), '/C attrib +h +s "' + securePath + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end;
    
    // Operações com arquivos...
    tempFile := ExpandConstant('{tmp}\UpdateChecker.ps1');
    destFile := securePath + '\UpdateChecker.ps1';
    
    ExtractTemporaryFile('UpdateChecker.ps1');
    
    if FileExists(tempFile) then
    begin
      // Garante que o arquivo de destino também seja oculto
      if FileExists(destFile) then
      begin
        Exec(ExpandConstant('{cmd}'), '/C attrib -h -s "' + destFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
        DeleteFile(destFile);
      end;
      
      if not RenameFile(tempFile, destFile) then
        Result := FileCopy(tempFile, destFile, False);
      
      // Aplica atributos ocultos+sistema
      Exec(ExpandConstant('{cmd}'), '/C attrib +h +s "' + destFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end;
    
    Result := FileExists(destFile);
    
  except
    Log('Erro: ' + GetExceptionMessage);
    Result := False;
  end;
end;

function ExtractPostgreSQLScript(): Boolean;
var
  tempFile, destFile, securePath: string;
  ResultCode: Integer;
begin
  Result := False;
  
  // Só executa se as tarefas relevantes estiverem selecionadas
  if not (IsTaskSelected('postgres_completo') or IsTaskSelected('postgres_somente')) then
  begin
    Result := True;
    Exit;
  end;

  securePath := ExpandConstant('{commonappdata}\QualityTemp');
  destFile := securePath + '\installPostgreSQL.ps1';
  
  try
    Log('Iniciando extração do script PostgreSQL...');
    
    // 1. Garante que o diretório existe e está configurado como oculto
    if not DirExists(securePath) then
    begin
      if not CreateDir(securePath) then
      begin
        Log('Erro ao criar diretório: ' + securePath);
        Exit;
      end;
      // Configura o diretório como oculto
      Exec(ExpandConstant('{cmd}'), '/C attrib +h "' + securePath + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end
    else
    begin
      // Garante que o diretório existente está marcado como oculto
      Exec(ExpandConstant('{cmd}'), '/C attrib +h "' + securePath + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    end;

    // 2. Extrai o arquivo para a pasta temporária
    ExtractTemporaryFile('installPostgreSQL.ps1');
    tempFile := ExpandConstant('{tmp}\installPostgreSQL.ps1');
    
    if not FileExists(tempFile) then
    begin
      Log('Erro: Arquivo temporário não encontrado em ' + tempFile);
      Exit;
    end;

    // 3. Remove arquivo existente no destino (se houver)
    if FileExists(destFile) then
    begin
      // Remove atributos ocultos/sistema antes de deletar
      Exec(ExpandConstant('{cmd}'), '/C attrib -h -s "' + destFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      if not DeleteFile(destFile) then
      begin
        Log('Erro ao remover arquivo existente: ' + destFile);
        Exit;
      end;
    end;

    // 4. Copia o arquivo para o destino final
    if not FileCopy(tempFile, destFile, False) then
    begin
      Log('Erro ao copiar para: ' + destFile);
      Exit;
    end;

    // 5. Aplica atributos ocultos e de sistema ao arquivo
    Exec(ExpandConstant('{cmd}'), '/C attrib +h +s "' + destFile + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    
    // 6. Verificação final
    if FileExists(destFile) then
    begin
      Log('Script PostgreSQL instalado e ocultado com sucesso em: ' + destFile);
      Result := True;
      
      // Verificação adicional no log
      Exec(
        ExpandConstant('{cmd}'),
        '/C dir /a "' + securePath + '"',
        '',
        SW_HIDE,
        ewWaitUntilTerminated,
        ResultCode
      );
    end
    else
    begin
      Log('ERRO: Arquivo não encontrado no destino após cópia');
    end;
    
  except
    Log('Exceção em ExtractPostgreSQLScript: ' + GetExceptionMessage);
  end;
end;

function InitializeSetup(): Boolean;

begin
  Result := True; // Por padrão, permite a instalação
  
  try
    Log('Iniciando verificação de atualizações...');
    
    // 1. Extrai o verificador de atualizações
    if not ExtractUpdateChecker() then
    begin
      MsgBox('Não foi possível verificar atualizações. A instalação continuará normalmente.', 
             mbInformation, MB_OK);
      Log('Pulando verificação de atualização devido a falha na extração do script');
      Exit;
    end;

    Log('Script de atualização extraído com sucesso: ' + ExpandConstant('{commonappdata}\QualityTemp\UpdateChecker.ps1'));

    // 2. Executa o verificador de atualizações
    if Exec(
      ExpandConstant('{sys}\WindowsPowerShell\v1.0\powershell.exe'), 
      '-NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File "' + 
      ExpandConstant('{commonappdata}\QualityTemp\UpdateChecker.ps1') + '" -CurrentVersion "' + 
      '{#MyAppVersion}' + '" -InstallerPath "' + ExpandConstant('{srcexe}') + '"', 
      '', SW_HIDE, ewWaitUntilTerminated, ResultCode) 
    then
    begin
      case ResultCode of
        0:  // Sem atualização necessária
            Log('Nenhuma atualização disponível. Prosseguindo com instalação da versão ' + '{#MyAppVersion}');
            
        1:  // Usuário aceitou a atualização
            begin
              Log('Usuário aceitou a atualização. Fechando instalador atual...');
              PostMessage(WizardForm.Handle, WM_CLOSE, 0, 0);
              Result := False;
              Exit;
            end;
            
        2:  // Usuário recusou a atualização
            Log('Usuário recusou a atualização. Continuando com instalação da versão atual.');
            
        3:  // Usuário cancelou a atualização (novo caso)
            begin
              Log('Usuário cancelou a atualização. Interrompendo a instalação.');
              MsgBox('A atualização foi cancelada. A instalação será interrompida.', mbInformation, MB_OK);
              Result := False;  // Aborta a instalação
              Exit;
            end;
            
        else // Erro inesperado
            begin
              MsgBox('Erro durante a verificação de atualização (Código: ' + 
                    IntToStr(ResultCode) + '). Continuando com instalação normal.', 
                    mbError, MB_OK);
              Log('Código de retorno inesperado do UpdateChecker: ' + IntToStr(ResultCode));
            end;
      end;
    end
    else
    begin
      Log('Falha ao executar o verificador de atualizações via PowerShell');
      MsgBox('Não foi possível executar a verificação de atualizações. A instalação continuará normalmente.', 
             mbInformation, MB_OK);
    end;
    
  except
    Log('Erro durante o processo de verificação de atualização: ' + GetExceptionMessage);
  end;
end;

// ==============================================
// FUNÇÕES AUXILIARES
// ==============================================

function FindNthDot(const S: String; N: Integer): Integer;
var
  i, Count: Integer;
begin
  Result := 0;
  Count := 0;
  for i := 1 to Length(S) do
  begin
    if S[i] = '.' then
    begin
      Inc(Count);
      if Count = N then
      begin
        Result := i;
        Exit;
      end;
    end;
  end;
end;

function SplitVersionString(VersionStr: String; var Parts: TArrayOfString): Boolean;
var
  Pos1, Pos2: Integer;
begin
  Result := False;
  try
    SetArrayLength(Parts, 3);
    Pos1 := FindNthDot(VersionStr, 1);
    if Pos1 = 0 then Exit;
    Pos2 := FindNthDot(VersionStr, 2);
    if Pos2 = 0 then Exit;
    Parts[0] := Copy(VersionStr, 1, Pos1 - 1);
    Parts[1] := Copy(VersionStr, Pos1 + 1, Pos2 - Pos1 - 1);
    Parts[2] := Copy(VersionStr, Pos2 + 1, Length(VersionStr));
    Result := True;
  except
    Result := False;
  end;
end;

function CompareVersions(Version1, Version2: String): Integer;
var
  i, Num1, Num2: Integer;
  Parts1, Parts2: TArrayOfString;
begin
  if Version1 = Version2 then
  begin
    Result := 0;
    Exit;
  end;
  if not SplitVersionString(Version1, Parts1) or not SplitVersionString(Version2, Parts2) then
  begin
    Result := 0;
    Exit;
  end;
  for i := 0 to 2 do
  begin
    Num1 := StrToIntDef(Parts1[i], 0);
    Num2 := StrToIntDef(Parts2[i], 0);    
    if Num1 > Num2 then
    begin
      Result := 1;
      Exit;
    end
    else if Num1 < Num2 then
    begin
      Result := -1;
      Exit;
    end;
  end;
  Result := 0;
end;

function ValidarCNPJ(CNPJ: String): Boolean;
var
  CNPJLimpo: String;
  I: Integer;
begin
  CNPJLimpo := '';
  for I := 1 to Length(CNPJ) do
  begin
    if (CNPJ[I] >= '0') and (CNPJ[I] <= '9') then
      CNPJLimpo := CNPJLimpo + CNPJ[I];
  end;

  if Length(CNPJLimpo) = 14 then
    Result := True
  else if (Length(CNPJ) = 18) and (CNPJ[3] = '.') and (CNPJ[7] = '.') and (CNPJ[11] = '/') and (CNPJ[16] = '-') then
    Result := True
  else
    Result := False;
end;

// ==============================================
// CONFIGURAÇÃO DA INTERFACE
// ==============================================

procedure InitializeWizard;
var
  VerticalPos: Integer;
begin
  // Armazena o ID da página de tarefas para referência posterior
  TaskPageID := wpSelectTasks;
  // Configuração da página de banco de dados
  PaginaConfig := CreateCustomPage(
    wpSelectTasks,
    'Configuraçăo do Banco de Dados', 
    'Digite os dados necessários para configurar o banco de dados.'
  );
  PaginaConfig.Surface.Height := ScaleY(400);
  VerticalPos := ScaleY(10);
  
  // Campo Porta
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Left := ScaleX(10);
    Top := VerticalPos;
    Caption := 'Porta do Banco:';
  end;
  PortaEdit := TEdit.Create(PaginaConfig);
  PortaEdit.Parent := PaginaConfig.Surface;
  PortaEdit.Left := ScaleX(120);
  PortaEdit.Top := VerticalPos;
  PortaEdit.Width := ScaleX(100);
  PortaEdit.Text := '5432';
  VerticalPos := VerticalPos + ScaleY(30);

  // Campo CNPJ
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Left := ScaleX(10);
    Top := VerticalPos;
    Caption := 'CNPJ:';
  end;
  CNPJEdit := TEdit.Create(PaginaConfig);
  CNPJEdit.Parent := PaginaConfig.Surface;
  CNPJEdit.Left := ScaleX(120);
  CNPJEdit.Top := VerticalPos;
  CNPJEdit.Width := ScaleX(200);
  VerticalPos := VerticalPos + ScaleY(30);

  // Campo IDQ
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Left := ScaleX(10);
    Top := VerticalPos;
    Caption := 'IDQ:';
  end;
  IDQEdit := TEdit.Create(PaginaConfig);
  IDQEdit.Parent := PaginaConfig.Surface;
  IDQEdit.Left := ScaleX(120);
  IDQEdit.Top := VerticalPos;
  IDQEdit.Width := ScaleX(200);
  VerticalPos := VerticalPos + ScaleY(30);

  // Campo Nome do Banco
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Left := ScaleX(10);
    Top := VerticalPos;
    Caption := 'Nome do Banco:';
  end;
  NomeBancoEdit := TEdit.Create(PaginaConfig);
  NomeBancoEdit.Parent := PaginaConfig.Surface;
  NomeBancoEdit.Left := ScaleX(120);
  NomeBancoEdit.Top := VerticalPos;
  NomeBancoEdit.Width := ScaleX(200);
  NomeBancoEdit.Text := 'posto';
  VerticalPos := VerticalPos + ScaleY(30);
  
  // Campo Senha
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Left := ScaleX(10);
    Top := VerticalPos;
    Caption := 'Senha do PostgreSQL:';
  end;
  SenhaEdit := TEdit.Create(PaginaConfig);
  SenhaEdit.Parent := PaginaConfig.Surface;
  SenhaEdit.Left := ScaleX(120);
  SenhaEdit.Top := VerticalPos;
  SenhaEdit.Width := ScaleX(200);
  SenhaEdit.Text := '123456';
  VerticalPos := VerticalPos + ScaleY(40);

  // Título Firewall
  with TLabel.Create(PaginaConfig) do
  begin
    Parent := PaginaConfig.Surface;
    Caption := 'Portas do Firewall:';
    Font.Style := [fsBold];
    Top := VerticalPos;
    Left := ScaleX(10);
  end;
  VerticalPos := VerticalPos + ScaleY(25);

  // Checkboxes
  CheckBoxPostgres1 := TCheckBox.Create(PaginaConfig);
  CheckBoxPostgres1.Parent := PaginaConfig.Surface;
  CheckBoxPostgres1.Caption := 'Abrir porta 5432 (Postgres)';
  CheckBoxPostgres1.Top := VerticalPos;
  CheckBoxPostgres1.Left := ScaleX(10);
  CheckBoxPostgres1.Width := ScaleX(220);

  CheckBoxPostgres2 := TCheckBox.Create(PaginaConfig);
  CheckBoxPostgres2.Parent := PaginaConfig.Surface;
  CheckBoxPostgres2.Caption := 'Abrir porta 5433 (Postgres)';
  CheckBoxPostgres2.Top := VerticalPos;
  CheckBoxPostgres2.Left := ScaleX(240);
  CheckBoxPostgres2.Width := ScaleX(220);
  VerticalPos := VerticalPos + ScaleY(30);

  CheckBoxWebpostopay := TCheckBox.Create(PaginaConfig);
  CheckBoxWebpostopay.Parent := PaginaConfig.Surface;
  CheckBoxWebpostopay.Caption := 'Abrir porta 8080 (Webpostopay)';
  CheckBoxWebpostopay.Top := VerticalPos;
  CheckBoxWebpostopay.Left := ScaleX(10);
  CheckBoxWebpostopay.Width := ScaleX(220);

  CheckBoxSemParar := TCheckBox.Create(PaginaConfig);
  CheckBoxSemParar.Parent := PaginaConfig.Surface;
  CheckBoxSemParar.Caption := 'Abrir porta 1217 (Sem parar)';
  CheckBoxSemParar.Top := VerticalPos;
  CheckBoxSemParar.Left := ScaleX(240);
  CheckBoxSemParar.Width := ScaleX(220);
end;

procedure RemoverServicosCompletamente();
var
  ResultCode: Integer;
  Servicos: TArrayOfString;
  i: Integer;
begin
  // Lista de serviços (ajuste os nomes conforme necessário)
  SetArrayLength(Servicos, 10);
  Servicos[0] := 'ServicoBaixaAutomatica';
  Servicos[1] := 'ServicoFiscal';
  Servicos[2] := 'ServicoAutomacao';
  Servicos[3] := 'webPostoPayServer';
  Servicos[4] := 'ServicoPremmia';
  Servicos[5] := 'ServicoSemParar';
  Servicos[6] := 'QualityPulser';
  Servicos[7] := 'srvIntegraWeb';
  Servicos[8] := 'ServicoNoveNove';
  Servicos[9] := 'ServicoShellBox';
  
  for i := 0 to GetArrayLength(Servicos)-1 do
  begin
    Exec(ExpandConstant('{sys}\sc.exe'), 'stop ' + Servicos[i], '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Sleep(1000);
    Exec(ExpandConstant('{sys}\sc.exe'), 'config ' + Servicos[i] + ' start= disabled', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Sleep(500);
    Exec(ExpandConstant('{sys}\sc.exe'), 'delete ' + Servicos[i], '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Sleep(500);
  end;
end;

procedure EncerrarProcessosExcluirPasta();
var
  Processos: TArrayOfString;
  i, ResultCode: Integer;
  UninstallString: String;
  AppId: String;
begin
  // Definir o AppId do seu aplicativo (igual ao do registro)
  AppId := '{32F8EC48-01AC-445F-AE3A-6539C06F4D66}_is1';

  // 1. Primeiro tenta desinstalar via uninstaller padrão
  if RegQueryStringValue(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + AppId,
     'QuietUninstallString', UninstallString) then
  begin
    Log('Executando uninstaller padrão: ' + UninstallString);
    if Exec(RemoveQuotes(UninstallString), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
    begin
      if ResultCode = 0 then
        Log('Desinstalação padrão concluída com sucesso')
      else
        Log('Desinstalação padrão retornou código: ' + IntToStr(ResultCode));
    end
    else
    begin
      Log('Falha ao executar o uninstaller padrão, tentando modo normal...');
      if RegQueryStringValue(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + AppId,
         'UninstallString', UninstallString) then
      begin
        Exec(RemoveQuotes(UninstallString), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      end;
    end;
    Sleep(5000); // Espera para conclusão
  end;

  // 2. Remove serviços
  RemoverServicosCompletamente();

  // 3. Mata processos associados
  SetArrayLength(Processos, 12);
  Processos[0] := 'webPosto';
  Processos[1] := 'QualityPosto';
  Processos[2] := 'IntegraWebService';
  Processos[3] := 'PulserWeb';
  Processos[4] := 'QualityPDV_PAF';
  Processos[5] := 'webPostoPaySW';
  Processos[6] := 'webPostoPremmiaIntegracao';
  Processos[7] := 'webPostoSemPararIntegracao';
  Processos[8] := 'webPostoFiscalServer';
  Processos[9] := 'webPostoLeituraAutomacao';
  Processos[10] := 'webPostoBaixaAutomatica';
  Processos[11] := 'webPostoShellBoxIntegracao';

  for i := 0 to GetArrayLength(Processos)-1 do
  begin
    Exec(ExpandConstant('{sys}\taskkill.exe'), '/F /IM ' + Processos[i] + '.exe /T', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Sleep(500);
  end;
  Sleep(3000);

  // 4. Limpa registros antes de excluir a pasta
  if RegKeyExists(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + AppId) then
  begin
    RegDeleteKeyIncludingSubkeys(HKLM, 'Software\Microsoft\Windows\CurrentVersion\Uninstall\' + AppId);
  end;

  // 5. Exclui a pasta (com verificações adicionais)
  if DirExists('C:\Quality') then
  begin
    Log('Removendo pasta C:\Quality...');
    if not DelTree('C:\Quality', True, True, True) then
    begin
      Log('Falha no DelTree, tentando comando rmdir...');
      Exec(ExpandConstant('{cmd}'), '/C rmdir /s /q "C:\Quality"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      
      // Verificação final
      if DirExists('C:\Quality') then
        Log('Erro: Não foi possível remover C:\Quality')
      else
        Log('Pasta Quality removida com sucesso');
    end;
  end
  else
  begin
    Log('Pasta Quality não encontrada, pulando remoção');
  end;
end;

procedure MostrarMensagemAguarde(Mensagem: String);
var
  lblAguarde: TLabel;
begin
  ProgressForm := TForm.Create(nil);
  with ProgressForm do
  begin
    ClientWidth := ScaleX(400);
    ClientHeight := ScaleY(120);
    Position := poScreenCenter;
    Caption := 'Removendo instalação anterior...';
    BorderStyle := bsDialog;
    FormStyle := fsStayOnTop;
    
    lblAguarde := TLabel.Create(ProgressForm);
    with lblAguarde do
    begin
      Parent := ProgressForm;
      Caption := Mensagem;
      Left := ScaleX(20);
      Top := ScaleY(40);
      Width := ScaleX(360);
      WordWrap := True;
    end;
    
    Show();
    Update();
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := False;
  if PageID = PaginaConfig.ID then
    Result := not (IsTaskSelected('postgres_completo') or IsTaskSelected('postgres_somente'));
end;

  function NextButtonClick(CurPageID: Integer): Boolean;
var
  Porta: String;
  PostgreSQLRemoved: Boolean;
begin
  Result := True;
  
  if CurPageID = PaginaConfig.ID then
  begin
    Porta := PortaEdit.Text;

    if Trim(Porta) = '' then
    begin
      MsgBox('Por favor, digite a porta do banco.', mbError, MB_OK);
      Result := False;
    end
    else if IsPortInUse(Porta) then
    begin
      if MsgBox('A porta ' + Porta + ' já está em uso por outro processo.' + #13#10 +
                'Deseja continuar mesmo assim? Isso pode causar conflitos.', 
                mbConfirmation, MB_YESNO) = IDNO then
      begin
        Result := False;
      end;
    end;
  end;
    
  // --- VERIFICAÇÃO DA PASTA QUALITY ---
  if (CurPageID = TaskPageID) and 
       (IsTaskSelected('postgres_completo') or IsTaskSelected('pdvaux')) then
  begin
    if DirExists('C:\Quality') then
    begin
      if MsgBox('🚨 ATENÇÃO - PASTA JÁ EXISTENTE 🚨' + #13#10#13#10 +
                'Foi detectada uma instalação anterior em:' + #13#10 +
                'C:\Quality' + #13#10#13#10 +
                'Se continuar, será realizada uma EXCLUSÃO PERMANENTE de:' + #13#10 +
                '✓ Todos os serviços do WebPosto' + #13#10 +
                '✓ Todos os programas em execução relacionado a esta pasta' + #13#10 +
                '✓ Toda a pasta C:\Quality e seu conteúdo' + #13#10#13#10 +
                'TEM CERTEZA QUE DESEJA REMOVER COMPLETAMENTE?',
                mbConfirmation, MB_YESNO or MB_DEFBUTTON2) = IDYES then
      begin
        try
          MostrarMensagemAguarde('Removendo a pasta Quality e encerrando processos...');
          try
            EncerrarProcessosExcluirPasta();
            
            if DirExists('C:\Quality') then
              RaiseException('Falha na exclusão');
              
            MsgBox('✅ Remoção concluída com sucesso!', mbInformation, MB_OK);
          finally
            if Assigned(ProgressForm) then
            begin
              ProgressForm.Close();
              ProgressForm := nil;
            end;
          end;
        except
          MsgBox('❌ ERRO NA REMOÇÃO' + #13#10#13#10 +
                 'Motivo: ' + GetExceptionMessage + #13#10#13#10 +
                 'Ação necessária:' + #13#10 +
                 '1. Feche todos os programas relacionados ao WebPosto' + #13#10 +
                 '2. Reinicie o computador' + #13#10 +
                 '3. Execute novamente o instalador',
                 mbError, MB_OK);
          Result := False;
        end;
      end
      else
      begin
        MsgBox('⚠️ INSTALAÇÃO SOBRE EXISTENTE' + #13#10#13#10 +
               'Atenção: Os arquivos atuais serão mantidos' + #13#10 +
               'e poderão ser sobrescritos pela nova instalação.',
               mbInformation, MB_OK);
      end;
    end;
  end;
  
  // --- VERIFICAÇÃO DO POSTGRESQL 12 ---
if (CurPageID = TaskPageID) and 
   (IsTaskSelected('postgres_completo') or IsTaskSelected('postgres_somente')) then
begin
  if IsPostgreSQL12Installed then
  begin
    if MsgBox('🚨 ATENÇÃO - POSTGRESQL 12 DETECTADO 🚨' + #13#10#13#10 +
              'Foi encontrada uma instalação existente do PostgreSQL 12.' + #13#10#13#10 +
              'Se continuar, será realizada uma REMOÇÃO COMPLETA de:' + #13#10 +
              '✓ Serviço PostgreSQL' + #13#10 +
              '✓ Arquivos de programa' + #13#10 +
              '✓ Bancos de dados existentes' + #13#10 +
              '✓ Chaves de registro' + #13#10#13#10 +
              'DESEJA REMOVER COMPLETAMENTE ANTES DE CONTINUAR?',
              mbConfirmation, MB_YESNO or MB_DEFBUTTON2) = IDYES then
    begin
      try
        MostrarMensagemAguarde('Removendo PostgreSQL 12... Isso pode levar alguns minutos.');
        try
          if not ExecutarRemocaoPostgreSQL() then
            RaiseException('Falha na execução do script de limpeza');

          if IsPostgreSQL12Installed then
            RaiseException('O PostgreSQL ainda está instalado após a execução do script')
          else
            MsgBox('✅ PostgreSQL 12 removido com sucesso!', mbInformation, MB_OK);
        except
          // FORMA CORRETA para Inno Setup:
          MsgBox(
            '❌ ERRO NA REMOÇÃO DO POSTGRESQL' + #13#10#13#10 +
            'Motivo: ' + GetExceptionMessage + #13#10#13#10 +
            'Ação necessária:' + #13#10 +
            '1. Execute manualmente este arquivo como Administrador:' + #13#10 +
            ExpandConstant('{tmp}\clean_postgres_completo.ps1') + #13#10 +
            '2. Reinicie o computador' + #13#10 +
            '3. Execute novamente o instalador',
            mbError, 
            MB_OK
          );
          Result := False;
          Exit;
        end;
      finally
        if Assigned(ProgressForm) then
          ProgressForm.Free();
      end;
    end
    else if MsgBox('⚠️ AVISO - CONFLITO POTENCIAL' + #13#10#13#10 +
                   'Manter o PostgreSQL 12 instalado pode causar:' + #13#10 +
                   '✓ Conflitos na instalação' + #13#10 +
                   '✓ Problemas de compatibilidade' + #13#10#13#10 +
                   'DESEJA REALMENTE CONTINUAR SEM REMOVER?',
                   mbConfirmation, MB_YESNO or MB_DEFBUTTON2) = IDNO then
    begin
      Result := False;
      Exit;
    end;
  end;
end;

  if CurPageID = PaginaConfig.ID then
  begin
      Porta := PortaEdit.Text;

    if Trim(Porta) = '' then
      Result := False;

    if Trim(CNPJEdit.Text) = '' then
    begin
      MsgBox('Por favor, digite o CNPJ.', mbError, MB_OK);
      Result := False;
    end
    else if not ValidarCNPJ(CNPJEdit.Text) then
    begin
      MsgBox('CNPJ inválido. Digite um CNPJ com 14 dígitos ou no formato 00.000.000/0000-00.', mbError, MB_OK);
      Result := False;
    end;

    if Trim(IDQEdit.Text) = '' then
    begin
      MsgBox('Por favor, digite o IDQ.', mbError, MB_OK);
      Result := False;
    end;

    if Trim(NomeBancoEdit.Text) = '' then
    begin
      MsgBox('Por favor, digite o nome do banco.', mbError, MB_OK);
      Result := False;
    end;
    
    if Trim(SenhaEdit.Text) = '' then
    begin
      MsgBox('Por favor, digite a senha do PostgreSQL.', mbError, MB_OK);
      Result := False;
    end;
    
    if (Result) and (Porta <> '5432') then
    begin
      MsgBox(
        'Atenção: Você configurou uma porta personalizada (' + Porta + ').' + #13#10 +
        'Por favor, ajuste manualmente a porta nas configurações de conexão do pgAdmin.',
        mbInformation, MB_OK
      );
    end;
  end;
end;
// ==============================================
// PROCEDIMENTOS DE INSTALAÇÃO
// ==============================================
  procedure CurStepChanged(CurStep: TSetupStep);
var
  Porta, CNPJ, IDQ, NomeBanco, Senha, FirewallScript: String;
  Sucesso: Boolean;
  ResultCode: Integer;
  WaitTime: Integer;
  MaxWaitTime: Integer;
begin
  if (CurStep = ssPostInstall) then
  begin
    // Inicializa como verdadeiro (será modificado se houver falhas)
    Sucesso := True;
    
    // 1. Cria a pasta Quality no Roaming do usuário atual
    if (IsTaskSelected('postgres_completo') or IsTaskSelected('pdvaux')) then
      ForceDirectories(ExpandConstant('{userappdata}\Quality'));
      
    // 2. Processa instalação do PostgreSQL se for o caso
    if (IsTaskSelected('postgres_completo') or IsTaskSelected('postgres_somente')) then
    begin
      Porta := PortaEdit.Text;
      CNPJ := CNPJEdit.Text;
      IDQ := IDQEdit.Text;
      NomeBanco := NomeBancoEdit.Text;
      Senha := SenhaEdit.Text;

      // 1. Extrai o script PostgreSQL
      Log('Tentando extrair o script PostgreSQL...');
      if not ExtractPostgreSQLScript() then
      begin
        MsgBox('Falha ao extrair o script de instalação do PostgreSQL.', mbError, MB_OK);
        Sucesso := False;
      end
      else
      begin
        Log('Script PostgreSQL extraído com sucesso.');
        
        // 2. Configuração do firewall
        FirewallScript := '';
        
        if CheckBoxPostgres1.Checked then
          FirewallScript := FirewallScript +
            'netsh advfirewall firewall add rule name="Postgres 5432" dir=in action=allow protocol=TCP localport=5432' + #13#10 +
            'netsh advfirewall firewall add rule name="Postgres 5432" dir=out action=allow protocol=TCP localport=5432' + #13#10;

        if CheckBoxPostgres2.Checked then
          FirewallScript := FirewallScript +
            'netsh advfirewall firewall add rule name="Postgres 5433" dir=in action=allow protocol=TCP localport=5433' + #13#10 +
            'netsh advfirewall firewall add rule name="Postgres 5433" dir=out action=allow protocol=TCP localport=5433' + #13#10;

        if CheckBoxWebpostopay.Checked then
          FirewallScript := FirewallScript +
            'netsh advfirewall firewall add rule name="Webpostopay 8080" dir=in action=allow protocol=TCP localport=8080' + #13#10 +
            'netsh advfirewall firewall add rule name="Webpostopay 8080" dir=out action=allow protocol=TCP localport=8080' + #13#10;

        if CheckBoxSemParar.Checked then
          FirewallScript := FirewallScript +
            'netsh advfirewall firewall add rule name="Sem Parar 1217" dir=in action=allow protocol=TCP localport=1217' + #13#10 +
            'netsh advfirewall firewall add rule name="Sem Parar 1217" dir=out action=allow protocol=TCP localport=1217' + #13#10;

        if FirewallScript <> '' then
        begin
          SaveStringToFile(ExpandConstant('{commonappdata}\QualityTemp\FirewallScript.bat'), FirewallScript, False);
          if not Exec(ExpandConstant('{commonappdata}\QualityTemp\FirewallScript.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
          begin
            MsgBox('Erro ao executar o script do firewall.', mbError, MB_OK);
            Sucesso := False;
          end;
        end;

        // 3. Configura variáveis de ambiente
        if Sucesso then
        begin
          if not Exec(ExpandConstant('{cmd}'), '/C setx QPORTA "' + Porta + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
            Sucesso := False;
          if not Exec(ExpandConstant('{cmd}'), '/C setx QSENHA "' + Senha + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
            Sucesso := False;
          if not Exec(ExpandConstant('{cmd}'), '/C setx QBANCO "' + NomeBanco + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
            Sucesso := False;
          if not Exec(ExpandConstant('{cmd}'), '/C setx QIDQ "' + IDQ + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
            Sucesso := False;
        end;

        // 4. Executa o script PostgreSQL
        if Sucesso then
        begin
          Log('Executando script PostgreSQL...');
          
          WaitTime := 0;
          MaxWaitTime := 7200;
          
          SaveStringToFile(ExpandConstant('{commonappdata}\QualityTemp\postgres_running.tmp'), '', False);

          if not Exec(
              ExpandConstant('{sys}\WindowsPowerShell\v1.0\powershell.exe'),
              '-NoProfile -ExecutionPolicy Bypass -Command "& {' +
              '$host.UI.RawUI.WindowTitle = ''Instalação PostgreSQL - © Janiel Borges''; ' +
              'Start-Transcript -Path ''' + ExpandConstant('{tmp}\postgres_install.log') + ''' -Append | Out-Null; ' +
              '& ''' + ExpandConstant('{commonappdata}\QualityTemp\installPostgreSQL.ps1') + ''' ' +
              '-Porta ''' + Porta + ''' ' +
              '-CNPJ ''' + CNPJ + ''' ' +
              '-IDQ ''' + IDQ + ''' ' +
              '-NomeBanco ''' + NomeBanco + ''' ' +
              '-Senha ''' + Senha + '''; ' +
              'Remove-Item -Path ''' + ExpandConstant('{commonappdata}\QualityTemp\postgres_running.tmp') + '''; ' +
              'New-Item -Path ''' + ExpandConstant('{commonappdata}\QualityTemp\postgres_done.tmp') + ''' -ItemType File ' +
              '}"',
              '',
              SW_SHOW,
              ewNoWait,
              ResultCode
          ) then
          begin
            MsgBox('Falha ao iniciar o script PostgreSQL.', mbError, MB_OK);
            Sucesso := False;
          end
          else
          begin
            MsgBox('A instalação do PostgreSQL está em andamento. Por favor, aguarde a conclusão na janela do PowerShell.', mbInformation, MB_OK);
            
            while FileExists(ExpandConstant('{commonappdata}\QualityTemp\postgres_running.tmp')) and 
                  (WaitTime < MaxWaitTime) do
            begin
              Sleep(1000);
              WaitTime := WaitTime + 1;
              
              if (WaitTime mod 30) = 0 then
                Log('Aguardando conclusão... ' + IntToStr(WaitTime) + 's');
            end;
            
            if not FileExists(ExpandConstant('{commonappdata}\QualityTemp\postgres_done.tmp')) then
            begin
              if WaitTime >= MaxWaitTime then
                MsgBox('A instalação excedeu o tempo máximo de 2 horas.', mbError, MB_OK)
              else
                MsgBox('O script foi fechado antes da conclusão.', mbError, MB_OK);
              Sucesso := False;
            end;
          end;
        end;
      end;
    end;
    
    if Sucesso then
      MsgBox('Instalação concluída com sucesso!', mbInformation, MB_OK);

    if MsgBox('Deseja acessar o FTP para baixar o atualizador de serviços?', mbConfirmation, MB_YESNO) = IDYES then
      ShellExec('open', 'https://arquivo.qualityautomacao.com.br/PDV/Versoes/webPostoPDV/', '', '', SW_SHOW, ewNoWait, ResultCode);
  end;
end;

procedure DeinitializeSetup();
begin
  DelTree(ExpandConstant('{commonappdata}\QualityTemp'), True, True, True);
end;